#+seq_todo: TODO DRAFT DONE
#+hugo_base_dir: ../../
#+HUGO_SECTION: blog/2021
#+hugo_front_matter_format: yaml
#+hugo_custom_front_matter: :type post

#+author: rhnvrm
* TODO Setting up Bluetooth HSP/HFP Profiles on Pulseaudio
:PROPERTIES:
:EXPORT_FILE_NAME: bluetooth-hfp-pulseaudio
:EXPORT_DATE: 2021-01-26
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url blog/2021/01/26/bluetooth-hfp-pulseaudio
:END:

It is 2020, and we are going to go into 2021 in just a few days. Yet Linux
machines can't connect to a bluetooth device mic. I was rather surprised by this
when I finally gave in and bought a device early this year and it turned out
that I could only use it as a sink and not a source. You may scoff, this must be
a distro issue. Unfortunately, using the HSP/HFP profiles to use such a device
as a source does not work for any distro at the moment. Also, even if you have
the device A2DP profile working as a sink, you may not have realized that the
quality is not optimal.

I am not going to lie, it was a long journey which spanned months. I tried my
best documenting it.



** What Works
Nothing else works as flawlessly as the patches written by Pali which have been
forked by some users and put onto the AUR.

*** @pali's work
If you are looking for just a simple way I will try to share the steps I used to get this working. This is based on [[https://aur.archlinux.org/packages/pulseaudio-hsphfpd/#comment-780630][rjshrjndrn's comment]] under the AUR package forked by [[https://aur.archlinux.org/packages/pulseaudio-hsphfpd/#comment-780630][SpineEyE]].

1. Uninstall pulseaudio
   #+BEGIN_SRC
sudo pacman -Rd --nodeps pulseaudio
   #+END_SRC

*** Add to exclude packages
#+BEGIN_SRC
# /etc/pacman.conf
IgnorePkg = libpulse
#+END_SRC

** The Drama
** What does not work well
*** ofono and phonesim
*** pipewire

* DONE Using Minio in Github actions to mock s3
CLOSED: [2021-02-09 Tue 19:48]
:PROPERTIES:
:EXPORT_FILE_NAME: minio-github-actions
:EXPORT_DATE: 2021-02-09
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url blog/2021/02/09/minio-github-actions
:END:

I recently added Github Actions for [[https://github.com/rhnvrm/simples3][simples3.]] In a recent PR, a [[https://github.com/jacksgt][contributor]]
added support for custom endpoints. I was currently running =go test= on the
library using a local =.env= files which contains real AWS keys and an actual =s3=
bucket. I realized that we can mock this using a [[https://min.io/][minio]] server as well.

Coming from having used Gitlab pipelines, it seemed to be straightforward
to do. I would simply have to run a service and just set the appropriate
environment vars. Unfortunately, Github pipelines does not seem to support
container args for services. The conventional hack on most repos, is to build a
custom Dockerfile with the custom command, but it seemed unnecessary for just mocking minio for tests.

So after reading a bit, I found out that you can actually just run =docker run=
inside the job command as a step. Essentially, it boils down to just adding it
to your pipeline and setting up a few env vars. Minio accepts =MINIO_ACCESS_KEY=
and =MINIO_SECRET_KEY= in the docker env, which it uses to bootstrap the admin
credentials for the first time. These can be further used to create a mock
bucket using =aws s3 mb= and provide the custom endpoint as a flag. Finally,
=simples3= will use its own environment vars to interact with the mock minio, and
run the tests on it.

Here is the full workflow for reference:

#+BEGIN_SRC yaml
name: Go Test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15
    - name: Setup minio
      run: |
          docker run -d -p 9000:9000 --name minio \
                     -e "MINIO_ACCESS_KEY=minioadmin" \
                     -e "MINIO_SECRET_KEY=minioadmin" \
                     -v /tmp/data:/data \
                     -v /tmp/config:/root/.minio \
                     minio/minio server /data

          export AWS_ACCESS_KEY_ID=minioadmin
          export AWS_SECRET_ACCESS_KEY=minioadmin
          export AWS_EC2_METADATA_DISABLED=true

          aws --endpoint-url http://127.0.0.1:9000/ s3 mb s3://testbucket

    - name: Run Go Test
      run: go test -v ./...
      env:
        AWS_S3_BUCKET: testbucket
        AWS_S3_ACCESS_KEY: minioadmin
        AWS_S3_SECRET_KEY: minioadmin
        AWS_S3_ENDPOINT: http://127.0.0.1:9000
#+END_SRC

* Footnotes

* COMMENT Local Variables                          :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
