#+seq_todo: TODO DRAFT DONE
#+hugo_base_dir: ../../
#+HUGO_SECTION: blog/2020
#+hugo_front_matter_format: yaml
#+hugo_custom_front_matter: :type post

#+author: rhnvrm

* TODO Setting up ox-hugo with Doom Emacs :emacs:doomemacs:orgmode:foss:vim:@emacs:@notes:
:PROPERTIES:
:EXPORT_FILE_NAME: hello-world
:EXPORT_DATE: 2020-06-29
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url blog/2020/06/29/hello-world
:END:

** wip items
- I recently released my blogs [[/projects/bodhi][new theme]] on [[https://themes.gohugo.io/bodhi/][hugo-themes]].
- I had also started to re-learn Emacs for org-mode. I have a fully functional setup of Doom Emacs and have also been able to setup a workflow which works for me.
- My internal writing and documentation has improved as a result.
** Introduction
*** Why I switched to Emacs
**** Doom Emacs
***** Already Configured
***** Don't need to remember bindings
***** Evil Mode
****** Already know vim
****** Have tried spacemacs
**** Org Mode
*** Why Hugo
*** Why ox-hugo
** Setting up
**** https://randomgeekery.org/post/2020/06/ox-hugo-for-the-orgconfig/
** Conclusion

* DONE Generating Go docs using gomarkdoc and pandoc :linux:foss:@notes:golang:@golang:
CLOSED: [2020-11-24 Tue 02:19]
:PROPERTIES:
:EXPORT_FILE_NAME: generating-go-documentation
:EXPORT_DATE: 2020-11-24
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url blog/2020/11/24/generating-go-documentation
:END:

I recently had to distribute the documentation of an internal library to users.
Go developers are used to their editor to providing them with auto completion,
usually with the help of gopls. A lot of times it is necessary for users to be
able to browse a comprehensive list of methods and data types available for
reference. For open source projects, we rely on [[https://godoc.org/][godoc.org]] and [[https://pkg.go.dev][pkg.go.dev]]. But
unfortunately, it is not easy to host one for internal projects.

After a bit of searching, I found [[https://github.com/princjef/gomarkdoc][princejef/gomarkdoc]]. This project is able to process packages and use the docs, to generate a markdown file. Using this I was able to produce a markdown of the packages I wished to share with the users.

#+BEGIN_SRC sh
# install as a cli-tool
go get -u github.com/princjef/gomarkdoc/cmd/gomarkdoc

# generate the docs using specific packages
gomarkdoc ./pkg/foo \
	./pkg/bar \
	./pkg/lorem/ipsum > docs/user-docs.md
#+END_SRC

This was good enough, but a better way would be to distribute it as a single
=html= file. [[https://pandoc.org/][Pandoc]] is a swiss army knife, which can convert one markup format to
another. Combining this into the pipeline, I was able to generate an =html= file
which has the documentation, which is viewable in the browser and contains links
to the git repository as well.

To make the web document look good, I found two interesting things.

The first being, [[https://github.com/oxalorg/sakura][sakura.css]], which is a =classless= css stylesheet, which can be
applied to any =html= file and make it look like a modern website.

The second useful thing, are a few flags available in =pandoc= which help with making the documentation =html= file truly standalone.

1. [[https://pandoc.org/MANUAL.html#option--css][--css]]: This flag accepts a link to a =CSS= stylesheet
2. [[https://pandoc.org/MANUAL.html#option--self-contained][--self-contained]]: This flag produces the =html= file in a way, such that no external dependency is needed.

Using these flags, we can come up with the following script to generate the =html= file from the markdown file.

#+BEGIN_SRC sh
pandoc docs/user-docs.md \
	--toc \
	--metadata title="My Package - User Docs" \
	-c https://unpkg.com/sakura.css/css/sakura.css \
	--self-contained \
	-o docs/user-docs.html
#+END_SRC

This results in well rendered documentation which is standalone and looks modern as well.

[[file:docs-sample.png]]
* TODO Experiments with OBS in the cloud
:PROPERTIES:
:EXPORT_FILE_NAME: obs-cloud-experiments
:EXPORT_DATE: 2020-11-26
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url blog/2020/11/25/obs-cloud-experiments
:END:

*** Live streaming
**** Nginx rtmp setup
- Very slow
**** Setup kernel
- https://meetrix.io/blog/aws/changing-default-ubuntu-kernel.html
- =sudo apt-get -y install linux-image-extra-virtual=
- =grep -A100 submenu  /boot/grub/grub.cfg |grep menuentry=
- edit grub default in /etc/default/grub
- =sudo update-grub=
- =sudo reboot=
**** Setup docker
- =sudo apt update && sudo apt install docker.io=
- =sudo groupadd docker &&  sudo usermod -aG docker $USER=
**** Setup OBS
- =apt update=
- =add-apt-repository ppa:obsproject/obs-studio=
- =apt install ffmpeg obs-studio=
**** Tunnel locally
- =ssh -L 6901:127.0.0.1:6901 live-stream-instance=
**** Did not work
Setup container
- =docker run -p 5901:5901 -p 6901:6901 -p 2722:22 -ti lifestorm/obs-server=
**** Final message
After a lot of testing for the streaming setup on multiple instance types on EC2, I think the best and simple way would be to just stream from our local machines directly to youtube. The transcoding on those instances is not good enough and chrome is stuttering, jitsi was fine but no clue what could go wrong. Also, audio does not work yet (I changed the kernel from -aws to -generic, still no progress).

On the otherhand, we tested yesterday with Vishnu and I am able to produce a 1080p OBS stream with zero lag locally. On the actual stream day, we can switch to a 720p stream to be safe.

Also, the lag to operate via VNC after the starting OBS is bad enough to not allow operating the remote OBS, which could cause issues.

In case of an internet issue during the live stream, I tested the nginx-rtmp module for seamless switching by proxying, but the stream from local to that nginx drops a lot of packets whereas directly to youtube it drops nearly zero times. Avoiding this, we can just have a backup OBS on some other machine with a different ISP with everything setup and share the stream-key and start broadcasting from the other machine and stream (again directly to youtube) instead of via this nginx-proxy. A bit riskier and might have a few seconds of disruption, but overall quality would be maintained.

* DONE The x4ivygA51F Rabbit Hole
CLOSED: [2020-11-25 Wed 23:25]
:PROPERTIES:
:EXPORT_FILE_NAME: x4ivygA51F-rabbit-role
:EXPORT_DATE: 2020-11-25
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :url blog/2020/11/25/x4ivygA51F-rabbit-hole
:END:

I recently read the blog about the [[https://nordpass.com/most-common-passwords-list/][200 most common passwords of 2020]]. It was
also featured in Jon Snader's [[https://irreal.org/blog/?p=9301][recent blog post]]. When the original post was made,
I had glanced at the mysterious =x4ivygA51F=, which appeared at the 148th spot.
But when I read the blog post again and searched for an update on it, no one had
been able to figure out what that meant.

There were some guesses. Few folks on [[https://www.reddit.com/r/sysadmin/comments/jxtnet/200_worst_passwords_for_2020/][reddit]] and [[https://boards.4channel.org/g/thread/78809839/why-is-x4ivyga51f-the-148th-most-common-password][4chan]], guessed that it might be
password written in another language. This guess was based on a [[https://gizmodo.com/why-ji32k7au4a83-is-a-remarkably-common-password-1833045282][gizmodo article]],
which mentions something similar. To confirm this hypothesis, I tried searching
for Chinese websites if I could find some mention of this. There was little to
no mention of this to be able to confirm this, at least on what is to be found
through the indexed web on Google or Bing.

Although, one interesting finding here that I saw no one talk about was a
post on the forum of a website called 51haoyou. The post on this forum, which
talks about a breach by hackers on January 10, 2019 talks about this specific
password. In a footnote on [[http://www.51haoyou.com/discuzx3.2/thread-4903.html][this post]], it mentions the following:

#+BEGIN_QUOTE
Note: x4i***1F is the trial password originally displayed by discuz, and
x4ivygA51F is the result of my modification of the display program so that the
password is displayed completely. On 2019-10-28, I completed "The server-side
program is added to determine whether the user login password is encrypted on
the client side, otherwise the php program is interrupted", "Improved the Discuz
mobile version, and also realized that the user password is encrypted on the
client side. "Retransmit" time.
#+END_QUOTE

I guess that it could mean that the Discuz forum software by default suggests
this password somewhere on the registration page. Or administratively this is
set to be the default password somewhere by this BB software. Using the Cangjie
input method, I found those keystrokes build and translate to [[https://translate.google.com/?hl=en&tab=TT&authuser=0#view=home&op=translate&sl=zh-CN&tl=en&text=%E7%94%A0%E9%A1%8C1%E7%81%AB][=Question 1=]].
Something similar does come up on the [[http://www.51haoyou.com/discuzx3.2/member.php?mod=register][login page]] this does come up in terms of
security question, although this could be entirely incorrect as I don't know
Chinese or Cangjie. Another guess here is that this is the breach that led to
the inclusion of this password in the list itself.

* Footnotes

* COMMENT Local Variables                          :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
